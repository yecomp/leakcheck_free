import time
import pickle
import json

import requests
import telebot
from telebot.types import ReplyKeyboardMarkup
from leakcheck import LeakCheckAPI

import config


class UserSetting:
    def __init__(self):
        self.users_info = {}
        self.api_key = config.API_KEY
        self.url = f'https://leakcheck.net/api/?key={self.api_key}'
        # –¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã: {'checks': 400, 'keyword': 45}
        self.limits = {}

    def load_info(self):
        try:
            with open('settings.pkl', 'rb') as f:
                info = pickle.load(f)
            if info and isinstance(info, dict):
                self.users_info = info
            else:
                raise ValueError
        except:
            pass

    def save_info(self):
        try:
            if self.users_info:
                with open('settings.pkl', 'wb') as f:
                    pickle.dump(self.users_info, f)
        except:
            pass

    def upd_limits(self):
        try:
            api = LeakCheckAPI()
            api.set_key(config.API_KEY)
            limits = api.getLimits()
            if limits and isinstance(limits, dict):
                self.limits = limits
            else:
                raise ValueError
            return True
        except:
            pass

    def status(self, tid, new_status):
        try:
            if not self.users_info.get(tid):
                self.users_info[tid] = {}
            self.users_info[tid]["status"] = new_status
        except:
            pass


bot = telebot.TeleBot(config.TG_TOKEN)
user = UserSetting()


kb_main = ReplyKeyboardMarkup(True)
kb_main.row('üìß E-mail', 'üïπ –õ–æ–≥–∏–Ω', 'üíé –õ–∏–º–∏—Ç—ã')
kb_main.row('üì® E-mail –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É (keyword@*.*)')
kb_main.row('üì± –¢–µ–ª–µ—Ñ–æ–Ω [–°–ù–ì]', 'üåé Minecraft')

kb_cancel = ReplyKeyboardMarkup(True)
kb_cancel.row('üîô –û—Ç–º–µ–Ω–∞')


@bot.message_handler(commands=['start'])
def start_message(message):
    try:
        tid = message.chat.id
        user.upd_limits()
        checks, keyword = user.limits.values()
        text_message = f"–ü—Ä–∏–≤–µ—Ç! –í —ç—Ç–æ–º –±–æ—Ç–µ –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–∞–π—Ç–∞ *leakcheck*, –Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é *–±–µ—Å–ø–ª–∞—Ç–Ω–æ*!\n\n" + \
            f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ü—Ä–æ–≤–µ—Ä–æ–∫: `{checks}`\n–ü–æ –∫–ª—é—á—É: `{keyword}`\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: {config.ADMIN_TG}"
        bot.send_message(tid, text_message, parse_mode='markdown', reply_markup=kb_main)
        user.status(tid, "start")
    except:
        pass


@bot.message_handler(content_types=["text"])
def main_sender(message):
    tid = message.chat.id
    txt = message.text
    if txt == 'üîô –û—Ç–º–µ–Ω–∞':
        user.status(tid, "start")
        bot.send_message(tid, '–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –æ–±—Ä–∞—Ç–Ω–æ.', reply_markup=kb_main)
    elif txt == 'üíé –õ–∏–º–∏—Ç—ã':
        user.upd_limits()
        checks, keyword = user.limits.values()
        text_message = f"–û—Å—Ç–∞–ª–æ—Å—å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n–ü—Ä–æ–≤–µ—Ä–æ–∫: `{checks}`\n–ü–æ –∫–ª—é—á—É: `{keyword}`"
        bot.send_message(tid, text_message, parse_mode='markdown', reply_markup=kb_main)
    elif config.CHECK_TYPES.get(txt):
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏.
        user.status(tid, 'to_check')
        user.users_info[tid]["type"] = config.CHECK_TYPES[txt]
        bot.send_message(tid, '–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:', reply_markup=kb_cancel)
    elif user.users_info.get(tid, {}).get("status") == "to_check":
        try:
            user_type = user.users_info[tid]["type"]
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏.
            result = requests.get(user.url + f'&type={user_type}&check={txt}').json()
            if result["success"]:

                count = result["found"]
                raw_count = count
                result_chars = 0
                lines = []
                real_count = 0

                for x in result["result"]:
                    result_chars += len(x["line"])
                    if result_chars <= 3500:
                        lines.append(f'<code>{x["line"]}</code>')
                        real_count += 1
                    else:
                        count = str(count) + f' (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ: {real_count})'
                        raw_count = str(raw_count) + f' ({real_count})'
                        break

                lines = '\n'.join(lines)

                if count and lines:
                    result_text = f'–ù–∞–π–¥–µ–Ω–æ: <code>{count}</code>\n–°—Ç—Ä–æ–∫–∏:\n{lines}'
                    bot.send_message(tid, result_text, parse_mode='html', reply_markup=kb_main)
                else:
                    bot.send_message(tid, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=kb_main)
            else:
                error_desc = result["error"]
                if error_desc == "Not found":
                    bot.send_message(tid, f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ - –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup=kb_main)
                else:
                    bot.send_message(tid, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:\n`{error_desc}`\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: *{config.ADMIN_TG}*", parse_mode='markdown', reply_markup=kb_main)
        except:
            bot.send_message(tid, f"‚ùå –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: *{config.ADMIN_TG}*", parse_mode='markdown', reply_markup=kb_main)
        user.status(tid, "start")
    else:
        bot.send_message(tid, f"‚ùå –û—à–∏–±–∫–∞ - –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ!\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω—É: *{config.ADMIN_TG}*", parse_mode='markdown', reply_markup=kb_main)
    user.save_info()

if __name__ == "__main__":
    try:
        if user.upd_limits():
            print('[~] –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞... –ú–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –±–æ—Ç—É –≤ Telegram!')
            bot.polling(none_stop=True, interval=0)
        else:
            raise ValueError
    except Exception as e:
        print('[x] –ë–æ—Ç –∫—Ä–∞—à–Ω—É–ª—Å—è :c')
        print(f'[i] Info: {e}')
    print()
